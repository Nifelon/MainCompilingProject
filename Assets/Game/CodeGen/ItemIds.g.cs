// <auto-generated/>
using System;
using System.Collections.Generic;

namespace Game.Items
{
    public static class ItemIds
    {
        public const string Berry = "561777f7de1948bcaa73500c7e376bfd";
        public const string Fish = "ae5c477cc26642a9bda119f0f0897d8f";
        public const string LeatherPatch = "b06cd3b1080240119aa3038444f7983b";
        public const string Skin = "6379c0c0fa6249a08bf985cd54fcf004";
    }

    public enum ItemId
    {
        None = 0,
        Berry = unchecked((int)0x6F2A4EF1),
        Fish = unchecked((int)0x651BF4C9),
        LeatherPatch = unchecked((int)0xDDB760AC),
        Skin = unchecked((int)0x041A3A0E)
    }

    public static class ItemMap
    {
        private static readonly Dictionary<string, ItemId> _guidToEnum =
            new(StringComparer.OrdinalIgnoreCase)
            {
                [ItemIds.Berry] = ItemId.Berry,
                [ItemIds.Fish] = ItemId.Fish,
                [ItemIds.LeatherPatch] = ItemId.LeatherPatch,
                [ItemIds.Skin] = ItemId.Skin,
            };

        private static readonly Dictionary<ItemId, string> _enumToGuid = new()
        {
            [ItemId.Berry] = ItemIds.Berry,
            [ItemId.Fish] = ItemIds.Fish,
            [ItemId.LeatherPatch] = ItemIds.LeatherPatch,
            [ItemId.Skin] = ItemIds.Skin,
        };

        public static bool TryEnumByGuid(string guid, out ItemId id)
        {
            if (string.IsNullOrWhiteSpace(guid)) { id = default; return false; }
            return _guidToEnum.TryGetValue(guid, out id);
        }

        public static string ConstByEnum(ItemId id) =>
            _enumToGuid.TryGetValue(id, out var g) ? g : null;

        public static bool IsValid(ItemId id) => _enumToGuid.ContainsKey(id);

        public static IEnumerable<ItemId> AllIds => _enumToGuid.Keys;
        public static IEnumerable<KeyValuePair<ItemId, string>> Pairs => _enumToGuid;
    }
}
