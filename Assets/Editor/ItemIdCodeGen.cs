#if UNITY_EDITOR
using System.IO;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;

namespace Game.CodeGen
{
    /// <summary>
    /// Генерирует файл Assets/Game/CodeGen/ItemIds.g.cs:
    /// - Game.Items.ItemIds  (GUID-константы)
    /// - Game.Items.ItemId   (enum, c None=0 и стабильными значениями по GUID)
    /// - Game.Items.ItemMap  (GUID ⇄ enum, рантайм)
    /// Источник имён — имя ассета (англ), источник GUID — ItemSO.Guid.
    /// </summary>
    public static class ItemIdCodeGen
    {
        private const string OutputPath = "Assets/Game/CodeGen/ItemIds.g.cs";

        [MenuItem("Tools/Generate/Item Id Constants")]
        public static void Generate()
        {
            var found = AssetDatabase.FindAssets("t:ItemSO");
            var items = new List<(string codeName, string guid)>();

            foreach (var g in found)
            {
                var path = AssetDatabase.GUIDToAssetPath(g);
                var so = AssetDatabase.LoadAssetAtPath<ScriptableObject>(path);
                if (!so) continue;

                // через reflection читаем Guid, чтобы не зависеть от namespace ItemSO
                var t = so.GetType();
                var p = t.GetProperty("Guid") ?? t.GetProperty("GUID");
                if (p == null) continue;

                var guidVal = p.GetValue(so) as string;
                if (string.IsNullOrWhiteSpace(guidVal)) continue;

                var codeName = MakeConstName(so.name); // имя ассета -> PascalCase
                if (!string.IsNullOrWhiteSpace(codeName))
                    items.Add((codeName, guidVal));
            }

            // стабильность дифов и уникальность GUID
            items = items
                .DistinctBy(i => i.guid)
                .OrderBy(i => i.codeName)
                .ToList();

            var sb = new StringBuilder(16 * 1024);
            sb.AppendLine("// <auto-generated/>");
            sb.AppendLine("using System;");
            sb.AppendLine("using System.Collections.Generic;");
            sb.AppendLine();
            sb.AppendLine("namespace Game.Items");
            sb.AppendLine("{");

            // ItemIds
            sb.AppendLine("    public static class ItemIds");
            sb.AppendLine("    {");
            foreach (var it in items)
                sb.AppendLine($"        public const string {it.codeName} = \"{it.guid}\";");
            sb.AppendLine("    }");
            sb.AppendLine();

            // enum ItemId (сентинел + стабильные значения по GUID)
            sb.AppendLine("    public enum ItemId");
            sb.AppendLine("    {");
            sb.AppendLine("        None = 0,");
            for (int i = 0; i < items.Count; i++)
            {
                var it = items[i];
                var comma = i < items.Count - 1 ? "," : "";
                var val = StableIntFromGuid(it.guid);
                // если val > int.MaxValue, литерал без приведения станет uint → используем unchecked cast
                sb.AppendLine($"        {it.codeName} = unchecked((int)0x{val:X8}){comma}");
            }
            sb.AppendLine("    }");
            sb.AppendLine();

            // ItemMap (рантайм)
            sb.AppendLine("    public static class ItemMap");
            sb.AppendLine("    {");
            sb.AppendLine("        private static readonly Dictionary<string, ItemId> _guidToEnum =");
            sb.AppendLine("            new(StringComparer.OrdinalIgnoreCase)");
            sb.AppendLine("            {");
            foreach (var it in items)
                sb.AppendLine($"                [ItemIds.{it.codeName}] = ItemId.{it.codeName},");
            sb.AppendLine("            };");
            sb.AppendLine();
            sb.AppendLine("        private static readonly Dictionary<ItemId, string> _enumToGuid = new()");
            sb.AppendLine("        {");
            foreach (var it in items)
                sb.AppendLine($"            [ItemId.{it.codeName}] = ItemIds.{it.codeName},");
            sb.AppendLine("        };");
            sb.AppendLine();
            sb.AppendLine("        public static bool TryEnumByGuid(string guid, out ItemId id)");
            sb.AppendLine("        {");
            sb.AppendLine("            if (string.IsNullOrWhiteSpace(guid)) { id = default; return false; }");
            sb.AppendLine("            return _guidToEnum.TryGetValue(guid, out id);");
            sb.AppendLine("        }");
            sb.AppendLine();
            sb.AppendLine("        public static string ConstByEnum(ItemId id) =>");
            sb.AppendLine("            _enumToGuid.TryGetValue(id, out var g) ? g : null;");
            sb.AppendLine();
            sb.AppendLine("        public static bool IsValid(ItemId id) => _enumToGuid.ContainsKey(id);");
            sb.AppendLine();
            sb.AppendLine("        public static IEnumerable<ItemId> AllIds => _enumToGuid.Keys;");
            sb.AppendLine("        public static IEnumerable<KeyValuePair<ItemId, string>> Pairs => _enumToGuid;");
            sb.AppendLine("    }");

            sb.AppendLine("}"); // namespace

            Directory.CreateDirectory(Path.GetDirectoryName(OutputPath)!);
            File.WriteAllText(OutputPath, sb.ToString(), Encoding.UTF8);
            AssetDatabase.Refresh();
            Debug.Log($"[ItemIdCodeGen] Generated: {OutputPath} ({items.Count} items)");
        }

        private static string MakeConstName(string src)
        {
            if (string.IsNullOrWhiteSpace(src)) return null;
            var clean = new string(src.Where(ch => char.IsLetterOrDigit(ch) || ch == ' ' || ch == '_').ToArray());
            var parts = clean.Split(' ', '_')
                             .Where(p => p.Length > 0)
                             .Select(p => char.ToUpperInvariant(p[0]) + p[1..]);
            return string.Concat(parts); // "Leather_Patch" -> "LeatherPatch"
        }

        // mini DistinctBy для старых API
        private static IEnumerable<T> DistinctBy<T, TKey>(this IEnumerable<T> src, System.Func<T, TKey> key)
        {
            var seen = new HashSet<TKey>();
            foreach (var x in src)
                if (seen.Add(key(x))) yield return x;
        }

        // Стабильный int из GUID (для числовых значений enum)
        private static int StableIntFromGuid(string guid)
        {
            var g = new System.Guid(guid);
            var b = g.ToByteArray(); // 16 байт
            unchecked
            {
                int h = 17;
                for (int i = 0; i < b.Length; i++)
                    h = h * 31 + b[i];
                if (h == 0) h = 1; // 0 зарезервирован под None
                return h;
            }
        }
    }
}
#endif